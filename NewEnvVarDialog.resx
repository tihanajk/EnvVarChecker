<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAAAAAAAAAF2dSQBzmWQCUp88m0+gOf9PoDn/T6A5/1CgOt1VnkIfVZ1CAFCfOwBTnz1VT6A5/E+g
        Of9PoDn/UKA59VOePUJPoDkAVZ5AIFOePlNSnj1aUp48W1KfPFtRnzymT6A5/0+gOf9PoDn/T6A66lCf
        O3lQoDtqUZ87bVGfO25SnzxkVZ4/I06gOQBTnz1XUKA5/E+gOf9PoDn/T6A69VKePj9Rnz0ATqE3AFKf
        PHJPoDn/T6A5/0+gOf9QoDrgVJ0/HlaeQClRoDvNT6A5/U+gOf5PoDn+T6A5/k+gOf9PoDn/T6A5/0+g
        Of9PoDn/T6A5/0+gOf9PoDn/T6A5/0+gOf9RnzvHVp1AHVSePy9QoDruT6A5/0+gOf9PoDn9Up49Wk+f
        OgBJoTIAUZ88gk+gOf9PoDn/T6A5/1CfOtFVmkIPU589ek+gOf9PoDn/T6A5/0+gOf9PoDn/T6A5/0+g
        Of9PoDn/T6A5/0+gOf9PoDn/T6A5/0+gOf9PoDn/T6A5/0+gOf5Tnz1bVp1CHVCgOuJPoDn/T6A5/0+g
        Of9Snz1pTqA4AEihMgBRnz2CT6A5/0+gOf9PoDn/T5860VWZQQ9ToD1yT6A5/0+gOf9PoDn/T6A5/0+g
        Of9PoDn/T6A5/0+gOf9PoDn/T6A5/0+gOf9PoDn/T6A5/0+gOf9PoDn/UKA69lSfPklWnkEdUKA64k+g
        Of9PoDn/T6A5/1OfPWlPoDgATKE2AFKfPXJPoDn/T6A5/0+gOf9QnzrgU5w/HlefQhxRoDu0T6A68FCg
        OvFQoDrxUKA671CgOvZPoDn/T6A5/0+gOf9PoDn8UJ867FCfOuhQnzroUKA651CgOuBSnz2KW51HCFSe
        PjFQoDruT6A5/0+gOf9PoDn9Up49Wk+fOgBQoDoAU58+VE+gOfxPoDn/T6A5/1CgOvVTnj5DUZ88AFef
        QxBTnj8yU54+N1SfPzVVn0AwUp88i0+gOf9PoDn/T6A5/1CgOuNTnT5CU5w/J1ScPydWnkAnV59AH1ud
        RQZQnzsAUp89WE+gOfxPoDn/T6A5/1CgOfVUnj4/U588AFSfPwBVn0AvUKA660+gOf9PoDn/T6A5/1Gf
        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
        AA/4AAAf/AAAP/4AAH//AAD//8AH//////8=
</value>
  </data>
</root>